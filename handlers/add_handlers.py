from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from FSM.fsm import FSMAddProduct, FSMAddProductOne
from aiogram.types import Message, CallbackQuery
from keyboards.keyboards import create_cancel_kb, cancel_and_done_kb
from middlewares.check_user import CheckUserMessageMiddleware
from services.product import Product
from services.redis_server import create_redis_client, get_data_from_redis, save_data_to_redis, check_product_in_redis

router: Router = Router()
router.message.middleware(CheckUserMessageMiddleware())
r = create_redis_client()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /add
# –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@router.message(Command(commands='add'), StateFilter(default_state))
async def process_add_command(message: Message, state: FSMContext):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
    kb = await create_cancel_kb()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –∏–º—è —Ç–æ–≤–∞—Ä–∞
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∞', reply_markup=kb)
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    await state.set_state(FSMAddProduct.fill_name)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è
# –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@router.message(StateFilter(FSMAddProduct.fill_name))
async def process_name_sent(message: Message, state: FSMContext):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
    kb = await create_cancel_kb()
    # C–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ –∫–ª—é—á—É "name"
    await state.update_data(name=message.text)
    await message.answer(text='–°–ø–∞—Å–∏–±–æ!\n\n–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', reply_markup=kb)
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    await state.set_state(FSMAddProduct.fill_description)


# –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
# –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞
@router.message(StateFilter(FSMAddProduct.fill_description))
async def process_desc_sent(message: Message, state: FSMContext):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
    kb = await create_cancel_kb()
    # C–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ –∫–ª—é—á—É "description"
    await state.update_data(description=message.text)
    await message.answer(text='–°–ø–∞—Å–∏–±–æ!\n\n–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞', reply_markup=kb)
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    await state.set_state(FSMAddProduct.fill_sku)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞
# –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ü–≤–µ—Ç–æ–≤ —Ç–æ–≤–∞—Ä–∞
@router.message(StateFilter(FSMAddProduct.fill_sku))
async def process_sku_sent(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º user_id
    user_id = message.from_user.id
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
    kb = await create_cancel_kb()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ç –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –µ—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ —Å–æ–æ–±—â–∞–µ–º —á—Ç–æ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å
    if check_product_in_redis(user_id, message.text):
        await message.answer(text='–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –∞—Ä—Ç–∏–∫—É–ª–æ–º —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\n\n'
                                  '–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel', reply_markup=kb)
        return
    else:
        # C–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ –∫–ª—é—á—É "sku"
        await state.update_data(sku=message.text)
        await message.answer(text='–°–ø–∞—Å–∏–±–æ!\n\n–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª', reply_markup=kb)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ü–≤–µ—Ç–æ–≤ —Ç–æ–≤–∞—Ä–∞
        await state.set_state(FSMAddProduct.fill_colors)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞
# –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ü–≤–µ—Ç–æ–≤ —Ç–æ–≤–∞—Ä–∞
@router.message(StateFilter(FSMAddProduct.fill_colors))
async def process_colors_sent(message: Message, state: FSMContext):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
    kb = await create_cancel_kb()
    # C–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ –∫–ª—é—á—É "colors"
    await state.update_data(colors=message.text)
    await message.answer(text='–°–ø–∞—Å–∏–±–æ!\n\n–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª', reply_markup=kb)
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–æ–≤–∞—Ä–∞
    await state.set_state(FSMAddProduct.fill_sizes)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞
# –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ü–≤–µ—Ç–æ–≤ —Ç–æ–≤–∞—Ä–∞
@router.message(StateFilter(FSMAddProduct.fill_colors))
async def process_colors_sent(message: Message, state: FSMContext):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
    kb = await create_cancel_kb()
    # C–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ –∫–ª—é—á—É "colors"
    await state.update_data(colors=message.text)
    await message.answer(text='–°–ø–∞—Å–∏–±–æ!\n\n–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª', reply_markup=kb)
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–æ–≤–∞—Ä–∞
    await state.set_state(FSMAddProduct.fill_sizes)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ü–≤–µ—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤
# –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
@router.message(StateFilter(FSMAddProduct.fill_sizes))
async def process_sizes_sent(message: Message, state: FSMContext):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
    kb = await create_cancel_kb()
    # C–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ –∫–ª—é—á—É "sizes"
    await state.update_data(sizes=message.text)
    await message.answer(text='–°–ø–∞—Å–∏–±–æ!\n\n–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞', reply_markup=kb)
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–æ–≤–∞—Ä–∞
    await state.set_state(FSMAddProduct.fill_price)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞
# –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ
@router.message(StateFilter(FSMAddProduct.fill_price))
async def process_price_sent(message: Message, state: FSMContext):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å 2 –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤–æ
    kb = await cancel_and_done_kb()
    # C–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é —Ü–µ–Ω—É –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ –∫–ª—é—á—É "price"
    await state.update_data(price=message.text)
    await message.answer(text='–°–ø–∞—Å–∏–±–æ!\n\n–ê —Ç–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞\n\n<b>–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏—Ç–µ '
                              '–∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æüëá"</b>', reply_markup=kb)
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–æ–≤ —Ç–æ–≤–∞—Ä–∞
    await state.set_state(FSMAddProduct.fill_photo)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ñ–æ—Ç–æ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ñ–æ—Ç–æ
lst = []  # –°–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ñ–æ—Ç–æ


@router.message(StateFilter(FSMAddProduct.fill_photo), F.photo)
async def process_photo_sent(message: Message):
    largest_photo = message.photo[-1]
    lst.append({"unique_id": largest_photo.file_unique_id, "id": largest_photo.file_id})


# –•–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
@router.callback_query(StateFilter(FSMAddProduct.fill_photo), lambda callback_query: 'done' in callback_query.data)
async def process_done_button(callback_query: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    data = await state.get_data()
    data["photo_ids"] = lst
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
    product = Product(
        name=data.get("name"),
        description=data.get("description"),
        sku=data.get("sku"),
        colors=data.get("colors"),
        sizes=data.get("sizes"),
        price=data.get("price"),
        photo_ids=data.get("photo_ids"),
    )
    product = {product.__dict__['sku']: product.__dict__}
    # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback_query.from_user.id
    # –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ id
    user_data = get_data_from_redis(user_id)
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    user_data['products'].append(product)
    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    save_data_to_redis(user_id, user_data)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
    await callback_query.message.reply(text='–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –°–æ–∑–¥–∞–Ω!')
    # –æ—á–∏—â–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    await state.clear()


# –•–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /add_one. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:
@router.message(Command(commands='add_one'), StateFilter(default_state))
async def process_add_command(message: Message, state: FSMContext):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
    kb = await create_cancel_kb()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –∏–º—è —Ç–æ–≤–∞—Ä–∞
    await message.answer(text='–í—ã –¥–æ–±–∞–≤–ª—è–µ—Ç–µ —Ç–æ–≤–∞—Ä –æ–¥–Ω–∏–º —Å—Ç–æ–±–ª—Ü–æ–º.\n\n'
                              '<b>–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):</b>\n\n'
                              'üëâ –ò–º—è —Ç–æ–≤–∞—Ä–∞\n'
                              'üëâ –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n'
                              'üëâ –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞\n'
                              'üëâ –¶–≤–µ—Ç–∞ —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n'
                              'üëâ –†–∞–∑–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n'
                              'üëâ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ (–±–µ–∑ –≤–∞–ª—é—Ç—ã)', reply_markup=kb)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    await state.set_state(FSMAddProductOne.data)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤–≤–µ–¥–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
@router.message(StateFilter(FSMAddProductOne.data))
async def process_data_send(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤–æ
    kb = await cancel_and_done_kb()
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
    kb2 = await create_cancel_kb()
    # C–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ –∫–ª—é—á—É "name"
    data = message.text.split('\n')
    if len(data) == 6:
        if check_product_in_redis(user_id, data[2]):
            await message.answer(text='–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –∞—Ä—Ç–∏–∫—É–ª–æ–º —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\n\n'
                                      '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–æ–≤–∞—Ä –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"', reply_markup=kb2)
        else:
            await state.update_data(name=data[0], description=data[1], sku=data[2], colors=data[3], sizes=data[4],
                                    price=data[5])
            # –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤–≤–µ–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø—Ä–æ—Å–∏–º –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            await message.answer(text='–°–ø–∞—Å–∏–±–æ!\n\n–ê —Ç–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞\n\n<b>–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ '
                                      '–Ω–∞–∂–º–∏—Ç–µ'
                                      '–∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æüëá"</b>', reply_markup=kb)
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ñ–æ—Ç–æ
            await state.set_state(FSMAddProductOne.photo)
    else:
        await message.answer(text='–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞!\n\n'
                                  '<b>–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):</b>\n\n'
                                  'üëâ –ò–º—è —Ç–æ–≤–∞—Ä–∞\n'
                                  'üëâ –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n'
                                  'üëâ –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞\n'
                                  'üëâ –¶–≤–µ—Ç–∞ —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n'
                                  'üëâ –†–∞–∑–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n'
                                  'üëâ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ (–±–µ–∑ –≤–∞–ª—é—Ç—ã)\n\n'
                                  '<b>–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"</b>', reply_markup=kb2)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ñ–æ—Ç–æ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ñ–æ—Ç–æ
@router.message(StateFilter(FSMAddProductOne.photo), F.photo)
async def process_photo_sent(message: Message):
    largest_photo = message.photo[-1]
    lst.append({"unique_id": largest_photo.file_unique_id, "id": largest_photo.file_id})


# –•–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
@router.callback_query(StateFilter(FSMAddProductOne.photo), lambda callback_query: 'done' in callback_query.data)
async def process_done_button(callback_query: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    data = await state.get_data()
    data["photo_ids"] = lst
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
    product = Product(
        name=data.get("name"),
        description=data.get("description"),
        sku=data.get("sku"),
        colors=data.get("colors"),
        sizes=data.get("sizes"),
        price=data.get("price"),
        photo_ids=data.get("photo_ids"),
    )
    product = {product.__dict__['sku']: product.__dict__}
    # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback_query.from_user.id
    # –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ id
    user_data = get_data_from_redis(user_id)
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    user_data['products'].append(product)
    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    save_data_to_redis(user_id, user_data)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
    await callback_query.message.reply(text='–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –°–æ–∑–¥–∞–Ω!')
    # –æ—á–∏—â–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    await state.clear()

