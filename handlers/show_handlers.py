from aiogram import Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from FSM.fsm import SellItemStates
from keyboards.keyboards import create_sku_kb, create_options_kb, create_variants_kb, create_cancel_kb
from services.product import format_variants_message, generate_photos, format_main_info
import json
from services.redis_server import create_redis_client
from services.reports import sell_product

router: Router = Router()
r = create_redis_client()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /show –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–º–æ—â—å—é –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
@router.message(Command(commands='show'))
async def process_show_command(message: Message):
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
    kb = create_sku_kb()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>', reply_markup=kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ç–æ—Ä—ã—Ö callback_data = –∞—Ä—Ç–∏–∫—É–ª—É —Ç–æ–≤–∞—Ä–∞
@router.callback_query(lambda callback_query: len(callback_query.data) < 4)
async def process_callback_query(callback_query: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    article = callback_query.data
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Redis –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    value = r.get(article)
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å json
    json_value = json.loads(value)
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏
    main_info = format_main_info(json_value)
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å 2 –∫–Ω–æ–ø–∫–∞–º–∏ "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞" –∏ "–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ" —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ create_kb
    kb = create_options_kb(article)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.answer(main_info, reply_markup=kb)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞" –≤ –∫–æ—Ç–æ—Ä–æ–π callback_data = '_variants'
@router.callback_query(lambda callback_query: '_variants' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    article = callback_query.data.split('_')[0]
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Redis –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    value = r.get(article)
    json_value = json.loads(value)
    # –≤—ã–≤–æ–¥ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–∞
    value_variants = json_value['variants']
    formatted_variants = format_variants_message(value_variants)
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Å–µ–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ create_sku_kb()
    kb = create_options_kb(article)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.answer(formatted_variants)
    await callback_query.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá', reply_markup=kb)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞" –≤ –∫–æ—Ç–æ—Ä–æ–π callback_data = '_photo'
@router.callback_query(lambda callback_query: '_photo' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    article = callback_query.data.split('_')[0]
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Redis –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    value = r.get(article)
    json_value = json.loads(value)
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Å–µ–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ create_sku_kb()
    kb = create_options_kb(article)
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    if 'photo_ids' in json_value:
        photo_ids = json_value['photo_ids']
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await callback_query.message.answer_media_group(generate_photos(photo_ids))
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback_query.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá', reply_markup=kb)
    else:
        await callback_query.message.answer('–§–æ—Ç–æ –Ω–µ—Ç')
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–∞—Ç—å —Ç–æ–≤–∞—Ä" –≤ –∫–æ—Ç–æ—Ä–æ–π callback_data = '_sell', –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
@router.callback_query(lambda callback_query: '_sell' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    article = callback_query.data.split('_')[0]
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Redis –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    value = r.get(article)
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å json
    json_value = json.loads(value)
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ variants –∏–∑ json_value
    json_value_variants = json_value['variants']
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Ç–æ–≤–∞—Ä–∞
    kb = create_variants_kb(article, json_value_variants)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∞ üëá', reply_markup=kb)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–æ–º —Ç–æ–≤–∞—Ä–∞ –∏ –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–≤–∞–µ–º–æ–≥–æ
# —Ç–æ–≤–∞—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ–º "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"
@router.callback_query(lambda callback_query: '-' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    article = callback_query.data.split('_')[0]
    article_variant = callback_query.data
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FSM SellItemStates article
    await state.update_data(article_variant=article_variant)
    data = await state.get_data()
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ SellItemStates.quantity
    await state.set_state(SellItemStates.quantity)
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    kb = create_cancel_kb()
    # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ–º "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"
    await callback_query.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>', reply_markup=kb)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@router.message(lambda x: x.text and x.text.isdigit() and 1 <= int(x.text) <= 100, SellItemStates.quantity)
async def process_quantity(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    quantity = int(message.text)
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ article_variant –∏–∑ FSM
    data = await state.get_data()
    article_variant = data.get("article_variant")
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Redis –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    value = r.get(article_variant.split('-')[0])
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å json
    json_value = json.loads(value)
    # –≤—ã–≤–æ–¥ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–∞
    value_variants = json_value['variants']
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Å–µ–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Ç–æ–≤–∞—Ä–∞ create_variants_kb()
    kb = create_variants_kb(article_variant.split('-')[0], value_variants)
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    name = ''
    for i in value_variants:
        if i['sku'] == article_variant:
            name = i['name']
            break
    # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é sell_product
    if sell_product(article_variant, quantity) is True:
        # –ü–∏—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Ç–æ–≤–∞—Ä –ø—Ä–æ–¥–∞–Ω –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ quantity —à—Ç—É–∫
        await message.answer(text=f'–¢–æ–≤–∞—Ä {name} –ø—Ä–æ–¥–∞–Ω –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {quantity} —à—Ç.')
        # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∞ üëá', reply_markup=kb)
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ default
        await state.clear()
    else:
        # –ü–∏—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ
        await message.answer(text=f'–¢–æ–≤–∞—Ä–∞ {name} <b>–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ</b>. –í—ã–±–µ—Ä–µ—Ç–µ –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '
                                  f'"–û—Ç–º–µ–Ω–∞"', reply_markup=kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –µ—Å–ª–∏ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100
@router.message(lambda x: x.text and not x.text.isdigit() or int(x.text) < 1 or int(x.text) > 100,
                SellItemStates.quantity)
async def process_quantity(message: Message, state: FSMContext):
    # –î–µ–ª–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    kb = create_cancel_kb()
    # –ü–∏—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100 –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>', reply_markup=kb)


