from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from FSM.fsm import SellItemStates, ReturnItemStates, FSMEditProduct
from keyboards.keyboards import create_sku_kb, create_options_kb, create_variants_kb, create_cancel_kb, create_edit_kb, \
    create_edit_color_kb, create_edit_size_kb
from services.edit import edit_name, edit_description, edit_sku, edit_color, edit_size, check_color, check_size, \
    edit_price, check_price, get_stock, check_stock, edit_stock
from services.product import format_variants_message, generate_photos, format_main_info, return_product
import json
from services.redis_server import create_redis_client
from services.product import sell_product

router: Router = Router()
r = create_redis_client()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /show –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–º–æ—â—å—é –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
@router.message(Command(commands='show'))
async def process_show_command(message: Message):
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
    kb = await create_sku_kb()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>', reply_markup=kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ç–æ—Ä—ã—Ö callback_data = –∞—Ä—Ç–∏–∫—É–ª—É —Ç–æ–≤–∞—Ä–∞
@router.callback_query(lambda callback_query: callback_query.data.isdigit())
async def process_callback_query(callback_query: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    article = callback_query.data
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Redis –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    value = r.get(article)
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å json
    json_value = json.loads(value)
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏
    main_info = format_main_info(json_value)
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å 2 –∫–Ω–æ–ø–∫–∞–º–∏ "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞" –∏ "–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ" —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ create_kb
    kb = await create_options_kb(article)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.answer(main_info, reply_markup=kb)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞" –≤ –∫–æ—Ç–æ—Ä–æ–π callback_data = '_variants'
@router.callback_query(lambda callback_query: '_variants' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    article = callback_query.data.split('_')[0]
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Redis –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    value = r.get(article)
    json_value = json.loads(value)
    # –≤—ã–≤–æ–¥ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–∞
    value_variants = json_value['variants']
    formatted_variants = format_variants_message(value_variants)
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Å–µ–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ create_sku_kb()
    kb = await create_options_kb(article)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.answer(formatted_variants)
    await callback_query.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá', reply_markup=kb)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞" –≤ –∫–æ—Ç–æ—Ä–æ–π callback_data = '_photo'
@router.callback_query(lambda callback_query: '_photo' in callback_query.data and '_edit' not in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    article = callback_query.data.split('_')[0]
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Redis –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    value = r.get(article)
    json_value = json.loads(value)
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Å–µ–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ create_sku_kb()
    kb = await create_options_kb(article)
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    if 'photo_ids' in json_value:
        photo_ids = json_value['photo_ids']
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await callback_query.message.answer_media_group(generate_photos(photo_ids))
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback_query.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá', reply_markup=kb)
    else:
        await callback_query.message.answer('–§–æ—Ç–æ –Ω–µ—Ç')
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–∞—Ç—å —Ç–æ–≤–∞—Ä" –≤ –∫–æ—Ç–æ—Ä–æ–π callback_data = '_sell', –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
@router.callback_query(lambda callback_query: '_sell_button' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    main_article = callback_query.data.split('_')[0]
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Redis –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    value = r.get(main_article)
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å json
    json_value = json.loads(value)
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ variants –∏–∑ json_value
    json_value_variants = json_value['variants']
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Ç–æ–≤–∞—Ä–∞
    kb = await create_variants_kb(json_value_variants, for_what='_sell_variant')
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∞ üëá', reply_markup=kb)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–æ–º —Ç–æ–≤–∞—Ä–∞ –∏ –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–≤–∞–µ–º–æ–≥–æ
# —Ç–æ–≤–∞—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ–º "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"
@router.callback_query(lambda callback_query: '_sell_variant' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    article_variant = callback_query.data.split('_')[0]
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FSM SellItemStates article
    await state.update_data(article_variant=article_variant)
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ SellItemStates.quantity
    await state.set_state(SellItemStates.quantity)
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    kb = await create_cancel_kb()
    # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ–º "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"
    await callback_query.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>', reply_markup=kb)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@router.message(StateFilter(SellItemStates.quantity), lambda x: x.text and x.text.isdigit() and 1 <= int(x.text) <= 100)
async def process_quantity(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    quantity = int(message.text)
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ article_variant –∏–∑ FSM
    data = await state.get_data()
    article_variant = data.get("article_variant")
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Redis –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    value = r.get(article_variant.split('-')[0])
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å json
    json_value = json.loads(value)
    # –≤—ã–≤–æ–¥ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–∞
    value_variants = json_value['variants']
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    name = ''
    for i in value_variants:
        if i['sku'] == article_variant:
            name = i['name']
            break
    # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é sell_product
    if sell_product(article_variant, quantity) is True:
        # –ü–∏—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Ç–æ–≤–∞—Ä –ø—Ä–æ–¥–∞–Ω –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ quantity —à—Ç—É–∫
        await message.answer(text=f'–¢–æ–≤–∞—Ä {name} –ø—Ä–æ–¥–∞–Ω –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {quantity} —à—Ç.')
        # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        await message.answer(text='–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ /show')
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ default
        await state.clear()
    else:
        # –ü–∏—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ
        await message.answer(text=f'–¢–æ–≤–∞—Ä–∞ {name} <b>–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ</b>. –í—ã–±–µ—Ä–µ—Ç–µ –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '
                                  f'"–û—Ç–º–µ–Ω–∞"')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –µ—Å–ª–∏ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100
@router.message(StateFilter(SellItemStates.quantity), lambda x: x.text and not x.text.isdigit() or int(x.text) < 1 or int(x.text) > 100)
async def process_quantity(message: Message, state: FSMContext):
    # –î–µ–ª–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    kb = await create_cancel_kb()
    # –ü–∏—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100 –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>', reply_markup=kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–≤–∞—Ä
@router.callback_query(lambda callback_query: '_return_button' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    main_article = callback_query.data.split('_')[0]
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Redis –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    value = r.get(main_article)
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å json
    json_value = json.loads(value)
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ variants –∏–∑ json_value
    json_value_variants = json_value['variants']
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Ç–æ–≤–∞—Ä–∞
    kb = await create_variants_kb(json_value_variants, for_what='_return_variant')
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∞ üëá', reply_markup=kb)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–æ–º —Ç–æ–≤–∞—Ä–∞ –∏ –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ
# —Ç–æ–≤–∞—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ–º "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"
@router.callback_query(lambda callback_query: '_return_variant' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    article_variant = callback_query.data.split('_')[0]
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FSM SellItemStates article
    await state.update_data(article_variant=article_variant)
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ SellItemStates.quantity
    await state.set_state(ReturnItemStates.quantity)
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    kb = await create_cancel_kb()
    # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ–º "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"
    await callback_query.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>', reply_markup=kb)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@router.message(StateFilter(ReturnItemStates.quantity), lambda x: x.text and x.text.isdigit() and 1 <= int(x.text) <= 100)
async def process_quantity(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    quantity = int(message.text)
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ article_variant –∏–∑ FSM
    data = await state.get_data()
    article_variant = data.get("article_variant")
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Redis –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    value = r.get(article_variant.split('-')[0])
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å json
    json_value = json.loads(value)
    # –≤—ã–≤–æ–¥ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–∞
    value_variants = json_value['variants']
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    name = ''
    for i in value_variants:
        if i['sku'] == article_variant:
            name = i['name']
            break
    # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é return_product
    if return_product(article_variant, quantity) is True:
        # –ü–∏—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Ç–æ–≤–∞—Ä –ø—Ä–æ–¥–∞–Ω –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ quantity —à—Ç—É–∫
        await message.answer(text=f'–¢–æ–≤–∞—Ä {name} –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {quantity} —à—Ç.')
        # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        await message.answer(text='–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ /show')
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ default
        await state.clear()
    else:
        # –ü–∏—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ
        await message.answer(text='–ü—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Ç–æ–≤–∞—Ä–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –µ—Å–ª–∏ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100
@router.message(StateFilter(ReturnItemStates.quantity), lambda x: x.text and not x.text.isdigit() or int(x.text) < 1 or int(x.text) > 100)
async def process_quantity(message: Message, state: FSMContext):
    # –î–µ–ª–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    kb = await create_cancel_kb()
    # –ü–∏—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100 –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>', reply_markup=kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä
@router.callback_query(lambda callback_query: '_edit_button' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    main_article = callback_query.data.split('_')[0]
    # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ create_edit_kb
    kb = await create_edit_kb(main_article)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å üëá', reply_markup=kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@router.callback_query(lambda callback_query: '_edit_name' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    main_article = callback_query.data.split('_')[0]
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Redis –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    value = r.get(main_article)
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å json
    json_value = json.loads(value)
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    kb = await create_cancel_kb()
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FSMEditProduct edit_name
    await state.set_state(FSMEditProduct.edit_name)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –≤ FSM
    await state.update_data(main_article=main_article)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å
    await callback_query.message.answer(text=f'–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <b>{json_value["name"]}\n</b> –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ '
                                             '–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>', reply_markup=kb)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@router.message(StateFilter(FSMEditProduct.edit_name))
async def process_name(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    name = message.text
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ main_article –∏–∑ FSM
    data = await state.get_data()
    main_article = data.get("main_article")
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Redis –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    value = r.get(main_article)
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å json
    json_value = json.loads(value)
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é edit_name
    new_name = edit_name(json_value, name)
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ json
    new_name = json.dumps(new_name)
    # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ Redis
    r.set(main_article, new_name)
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
    kb = await create_edit_kb(main_article)
    # –ü–∏—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Ç–æ–≤–∞—Ä –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –∏ —Ç–µ–ø–µ—Ä—å –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ name
    await message.answer(text=f'–¢–æ–≤–∞—Ä –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –∏ —Ç–µ–ø–µ—Ä—å –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{name}</b>', reply_markup=kb)
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@router.callback_query(lambda callback_query: '_edit_description' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    main_article = callback_query.data.split('_')[0]
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Redis –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    value = r.get(main_article)
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å json
    json_value = json.loads(value)
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    kb = await create_cancel_kb()
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FSMEditProduct edit_description
    await state.set_state(FSMEditProduct.edit_description)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –≤ FSM
    await state.update_data(main_article=main_article)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å
    await callback_query.message.answer(text=f'–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <b>{json_value["description"]}\n</b> –í–≤–µ–¥–∏—Ç–µ '
                                             f'–Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>', reply_markup=kb)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@router.message(StateFilter(FSMEditProduct.edit_description))
async def process_description(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    description = message.text
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ main_article –∏–∑ FSM
    data = await state.get_data()
    main_article = data.get("main_article")
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Redis –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    value = r.get(main_article)
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å json
    json_value = json.loads(value)
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é edit_description
    new_description = edit_description(json_value, description)
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ json
    new_description = json.dumps(new_description)
    # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ Redis
    r.set(main_article, new_description)
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
    kb = await create_edit_kb(main_article)
    # –ü–∏—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Ç–æ–≤–∞—Ä –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –∏ —Ç–µ–ø–µ—Ä—å –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ description
    await message.answer(text=f'–¢–æ–≤–∞—Ä –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –∏ —Ç–µ–ø–µ—Ä—å –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ: <b>{description}</b>', reply_markup=kb)
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞
@router.callback_query(lambda callback_query: '_edit_sku' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    main_article = callback_query.data.split('_')[0]
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Redis –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    value = r.get(main_article)
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å json
    json_value = json.loads(value)
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    kb = await create_cancel_kb()
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FSMEditProduct edit_article
    await state.set_state(FSMEditProduct.edit_sku)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –≤ FSM
    await state.update_data(main_article=main_article)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å
    await callback_query.message.answer(text=f'–¢–µ–∫—É—â–∏–π –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞: <b>{json_value["sku"]}\n</b> –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π '
                                             f'–∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>', reply_markup=kb)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@router.message(StateFilter(FSMEditProduct.edit_sku))
async def process_sku(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    sku = message.text
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤ Redis
    if r.get(sku):
        await message.answer(text=f'–¢–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º <b>{sku}</b> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '
                                  f'<b>–æ—Ç–º–µ–Ω–∞</b>')
        return
    else:
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ main_article –∏–∑ FSM
        data = await state.get_data()
        main_article = data.get("main_article")
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Redis –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
        value = r.get(main_article)
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å json
        json_value = json.loads(value)
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é edit_sku
        new_sku = edit_sku(json_value, sku)
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ json
        new_sku = json.dumps(new_sku)
        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ Redis
        r.set(sku, new_sku)
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∞—Ä—Ç–∏–∫—É–ª
        r.delete(main_article)
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
        kb = await create_edit_kb(sku)
        # –ü–∏—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Ç–æ–≤–∞—Ä –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –∏ —Ç–µ–ø–µ—Ä—å –µ–≥–æ –∞—Ä—Ç–∏–∫—É–ª sku
        await message.answer(text=f'–¢–æ–≤–∞—Ä –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –∏ —Ç–µ–ø–µ—Ä—å –µ–≥–æ –∞—Ä—Ç–∏–∫—É–ª: <b>{sku}</b>', reply_markup=kb)
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞
@router.callback_query(lambda callback_query: '_edit_color' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    main_article = callback_query.data.split('_')[0]
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Redis –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    value = r.get(main_article)
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å json
    json_value = json.loads(value)
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ü–≤–µ—Ç–æ–≤ —Ç–æ–≤–∞—Ä–∞
    colors = json_value['colors']
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ü–≤–µ—Ç–æ–≤ —Ç–æ–≤–∞—Ä–∞ –∏ –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    kb = await create_edit_color_kb(colors)
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FSMEditProduct edit_color
    await state.set_state(FSMEditProduct.edit_color)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –≤ FSM
    await state.update_data(main_article=main_article)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–≤–µ—Ç–∞–º–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏ –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π —Ü–≤–µ—Ç –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å
    await callback_query.message.answer(text=f'–¢–µ–∫—É—â–∏–µ —Ü–≤–µ—Ç–∞ —Ç–æ–≤–∞—Ä–∞: <b>{colors}\n</b> –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –∏–ª–∏ '
                                             f'–Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>', reply_markup=kb)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@router.callback_query(lambda callback_query: '_show_color' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery, state: FSMContext):
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ FSM –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç
    await state.update_data(selected_color=callback_query.data.split("_")[0].lower())
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    kb = await create_cancel_kb()
    # –ü–∏—à–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞–∫–æ–π —Ü–≤–µ—Ç –æ–Ω –≤—ã–±—Ä–∞–ª –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π —Ü–≤–µ—Ç –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å
    await callback_query.message.answer(
        text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ü–≤–µ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: <b>{callback_query.data.split("_")[0]}</b>\n'
             f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ü–≤–µ—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>', reply_markup=kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
@router.message(StateFilter(FSMEditProduct.edit_color))
async def process_color(message: Message, state: FSMContext):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    kb = await create_cancel_kb()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–≤–µ—Ç –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
    if check_color(message.text.lower()):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ü–≤–µ—Ç –≤ FSM
        await state.update_data(desired_color=message.text.lower())
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ FSM –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã –∏ –∂–µ–ª–∞–µ–º–æ–≥–æ —Ü–≤–µ—Ç–∞
        data = await state.get_data()
        selected_color = data.get("selected_color")
        desired_color = data.get("desired_color")
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ main_article –∏–∑ FSM
        data = await state.get_data()
        main_article = data.get("main_article")
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Redis –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
        value = r.get(main_article)
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å json
        json_value = json.loads(value)
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é edit_color
        new_color = edit_color(json_value, selected_color, desired_color)
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ json
        new_color_dump = json.dumps(new_color)
        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ Redis
        r.set(main_article, new_color_dump)
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        # –í—ã–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –∏ —Ç–µ–ø–µ—Ä—å –µ–≥–æ —Ü–≤–µ—Ç desired_color, –∞ —Ç–∞–∫–∂–µ
        # –≤—ã–≤–æ–¥–∏–º, —á—Ç–æ –≤—Å–µ —Ü–≤–µ—Ç–∞ —Ç–æ–≤–∞—Ä–∞ —Ç–µ–ø–µ—Ä—å new_color['colors']
        await message.answer(text=f'–¶–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –∏ —Ç–µ–ø–µ—Ä—å –µ–≥–æ —Ü–≤–µ—Ç: <b>{desired_color}</b>\n'
                                  f'–í—Å–µ —Ü–≤–µ—Ç–∞ —Ç–æ–≤–∞—Ä–∞: <b>{new_color["colors"]}</b>')
    else:
        # –ï—Å–ª–∏ —Ü–≤–µ—Ç –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π, —Ç–æ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π —Ü–≤–µ—Ç –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å
        await message.answer(text=f'–¶–≤–µ—Ç –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>', reply_markup=kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞. –†–∞–±–æ—Ç–∞–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–Ω–æ–ø–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞.
@router.callback_query(lambda callback_query: '_edit_size' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery, state: FSMContext):
    main_article = callback_query.data.split('_')[0]
    value = r.get(main_article)
    json_value = json.loads(value)
    sizes = json_value['sizes']
    kb = await create_edit_size_kb(sizes)
    await state.set_state(FSMEditProduct.edit_size)
    await state.update_data(main_article=main_article)
    await callback_query.message.answer(text=f'–¢–µ–∫—É—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–∞: <b>{sizes}\n</b> –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∏–ª–∏ '
                                             f'–Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>', reply_markup=kb)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@router.callback_query(lambda callback_query: '_show_size' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery, state: FSMContext):
    await state.update_data(selected_size=callback_query.data.split("_")[0].lower())
    kb = await create_cancel_kb()
    await callback_query.message.answer(
        text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: <b>{callback_query.data.split("_")[0]}</b>\n'
             f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>', reply_markup=kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
@router.message(StateFilter(FSMEditProduct.edit_size))
async def process_size(message: Message, state: FSMContext):
    kb = await create_cancel_kb()
    if check_size(message.text.lower()):
        await state.update_data(desired_size=message.text.lower())
        data = await state.get_data()
        selected_size = data.get("selected_size")
        desired_size = data.get("desired_size")
        data = await state.get_data()
        main_article = data.get("main_article")
        value = r.get(main_article)
        json_value = json.loads(value)
        new_size = edit_size(json_value, selected_size, desired_size)
        new_size_dump = json.dumps(new_size)
        r.set(main_article, new_size_dump)
        await state.clear()
        await message.answer(text=f'–†–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –∏ —Ç–µ–ø–µ—Ä—å –µ–≥–æ —Ä–∞–∑–º–µ—Ä: <b>{desired_size}</b>\n'
                                  f'–í—Å–µ —Ä–∞–∑–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–∞: <b>{new_size["sizes"]}</b>')
    else:
        await message.answer(text=f'–†–∞–∑–º–µ—Ä –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>',
                             reply_markup=kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞. –†–∞–±–æ—Ç–∞–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–Ω–æ–ø–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞.
@router.callback_query(lambda callback_query: '_edit_price' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ main_article –∏–∑ callback_query
    main_article = callback_query.data.split('_')[0]
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Redis –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    value = r.get(main_article)
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å json
    json_value = json.loads(value)
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
    price = json_value['price']
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω—ã
    kb = await create_cancel_kb()
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ edit_price
    await state.set_state(FSMEditProduct.edit_price)
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(main_article=main_article)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π —Ç–æ–≤–∞—Ä–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback_query.message.answer(text=f'–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: <b>{price}\n</b> –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∏–ª–∏ '
                                             f'–Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>', reply_markup=kb)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
@router.message(StateFilter(FSMEditProduct.edit_price))
async def process_price(message: Message, state: FSMContext):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã
    kb = await create_cancel_kb()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–Ω–∞ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    if check_price(message.text):
        # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(desired_price=message.text)
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ main_article –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        main_article = data.get("main_article")
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ desired_price –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        desired_price = data.get("desired_price")
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Redis –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
        value = r.get(main_article)
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å json
        json_value = json.loads(value)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ c –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ edit_price
        new_price = edit_price(json_value, desired_price)
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å json
        new_price_dump = json.dumps(new_price)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ Redis
        r.set(main_article, new_price_dump)
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        # –í—ã–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏ —Ç–µ–ø–µ—Ä—å –µ–≥–æ —Ü–µ–Ω–∞ desired_price
        await message.answer(text=f'–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏ —Ç–µ–ø–µ—Ä—å –µ–≥–æ —Ü–µ–Ω–∞: <b>{desired_price}</b>')
    else:
        # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —Ç–æ –≤—ã–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ —Ü–µ–Ω–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        await message.answer(text=f'–¶–µ–Ω–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>',
                             reply_markup=kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ò–∑–º–µ–Ω–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏'. –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–∞ –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫.
@router.callback_query(lambda callback_query: '_edit_stock' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ main_article –∏–∑ callback_query
    main_article = callback_query.data.split('_')[0]
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Redis –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    value = r.get(main_article)
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å json
    json_value = json.loads(value)
    # –û—Ç—Å–µ–∫–∞–µ–º –≤ —Å–ª–æ–≤–∞—Ä–µ –≤—Å–µ –∫—Ä–æ–º–µ variants
    variants = json_value['variants']
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–∞
    kb = await create_variants_kb(variants, for_what='_stock')
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ edit_stock
    await state.set_state(FSMEditProduct.edit_stock)
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(main_article=main_article)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback_query.message.answer(text=f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é —Ç–æ–≤–∞—Ä–∞, –æ—Å—Ç–∞—Ç–∫–∏ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ '
                                             f'–Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>',
                                        reply_markup=kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º
# –æ—Å—Ç–∞—Ç–∫–æ–º —Ç–æ–≤–∞—Ä–∞ –∏ –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –ª–∏–±–æ –Ω–∞–∂–∞—Ç—å –æ—Ç–º–µ–Ω–∞.
@router.callback_query(lambda callback_query: '_stock' in callback_query.data and '-' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ main_article –∏–∑ callback_query
    main_article = callback_query.data.split('-')[0]
    variant_article = callback_query.data.split('_')[0]
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Redis –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    value = r.get(main_article)
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å json
    json_value = json.loads(value)
    print(json_value)
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ c –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ get_stock
    stock = get_stock(json_value, variant_article)
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω–∞
    kb = await create_cancel_kb()
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ edit_stock
    await state.set_state(FSMEditProduct.edit_stock)
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(main_article=main_article, variant_article=variant_article, stock=stock)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º —Ç–æ–≤–∞—Ä–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback_query.message.answer(text=f'–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞: <b>{stock}\n</b> –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –∏–ª–∏ '
                                                f'–Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>', reply_markup=kb)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
@router.message(StateFilter(FSMEditProduct.edit_stock))
async def process_stock(message: Message, state: FSMContext):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã
    kb = await create_cancel_kb()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å—Ç–∞—Ç–æ–∫ –≤–≤–µ–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    if check_stock(message.text):
        # –ï—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ –≤–≤–µ–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(desired_stock=message.text)
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ main_article –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        main_article = data.get("main_article")
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ variant_article –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        variant_article = data.get("variant_article")
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ desired_stock –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        desired_stock = data.get("desired_stock")
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Redis –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
        value = r.get(main_article)
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å json
        json_value = json.loads(value)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ c –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ edit_stock
        new_stock = edit_stock(json_value, variant_article, desired_stock)
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å json
        new_stock_dump = json.dumps(new_stock)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ Redis
        r.set(main_article, new_stock_dump)
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        # –í—ã–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –∏ —Ç–µ–ø–µ—Ä—å –µ–≥–æ –æ—Å—Ç–∞—Ç–æ–∫ desired_stock
        await message.answer(text=f'–û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –∏ —Ç–µ–ø–µ—Ä—å –µ–≥–æ –æ—Å—Ç–∞—Ç–æ–∫: <b>{desired_stock}</b>')
    else:
        # –ï—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —Ç–æ –≤—ã–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –æ—Å—Ç–∞—Ç–æ–∫ –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        await message.answer(text=f'–û—Å—Ç–∞—Ç–æ–∫ –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>',
                             reply_markup=kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–æ–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ" –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞. –í—ã–≤–æ–¥–∏—Ç –≤—Å–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É–µ—Ç –ª–∏ –∏—Ö
# –∑–∞–º–µ–Ω–∏—Ç—å
@router.callback_query(lambda callback_query: '_edit_photo' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    article = callback_query.data.split('_')[0]
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Redis –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    value = r.get(article)
    json_value = json.loads(value)
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω–∞
    kb = await create_cancel_kb()
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    if 'photo_ids' in json_value:
        photo_ids = json_value['photo_ids']
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await callback_query.message.answer_media_group(generate_photos(photo_ids))
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback_query.message.answer(text='–§–æ—Ç–æ –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ üëÜüèº')
        await callback_query.message.answer(text='–•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ?\n –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ñ–æ—Ç–æ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.', reply_markup=kb)
    else:
        await callback_query.message.answer('–§–æ—Ç–æ –Ω–µ—Ç')
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ö—Ä–∞–Ω–∏—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–º–µ—Ç –æ—Ç–º–µ–Ω–∞ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ
@router.message(F.photo)
async def process_photo_sent(message: Message):
    print(message.photo)




