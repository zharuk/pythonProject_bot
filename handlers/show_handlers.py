from pprint import pp

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from FSM.fsm import SellItemStates, ReturnItemStates, FSMEditProduct
from keyboards.keyboards import create_sku_kb, create_options_kb, create_variants_kb, create_cancel_kb, create_edit_kb,\
    create_edit_color_kb, create_edit_size_kb, cancel_and_done_kb
from middlewares.check_user import CheckUserMessageMiddleware
from services.edit import edit_name, edit_description, edit_sku, edit_color, edit_size, check_color, check_size, \
    edit_price, check_price, get_stock, check_stock, edit_stock
from services.product import format_variants_message, generate_photos, format_main_info, return_product, \
    get_product_from_data, check_product_in_redis, remove_product_from_data, delete_product_from_data, check_int
from services.product import sell_product
from services.redis_server import get_data_from_redis, save_data_to_redis

router: Router = Router()
router.message.middleware(CheckUserMessageMiddleware())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /show –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–º–æ—â—å—é –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
@router.message(Command(commands='show'))
async def process_show_command(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
    kb = await create_sku_kb(user_id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π', reply_markup=kb)
    a = await get_data_from_redis(user_id)
    pp(a)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–∞ callback_data = 'show'. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ç–∞–∫–æ–π –∂–µ –∫–∞–∫ –∏ —É –∫–æ–º–∞–Ω–¥—ã /show
@router.callback_query(lambda callback_query: callback_query.data == 'show')
async def process_show_callback(callback_query: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback_query.from_user.id
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
    kb = await create_sku_kb(user_id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π', reply_markup=kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ç–æ—Ä—ã—Ö callback_data = –∞—Ä—Ç–∏–∫—É–ª—É —Ç–æ–≤–∞—Ä–∞
@router.callback_query(lambda callback_query: '_main_sku' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery):
    # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback_query.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis
    user_data = await get_data_from_redis(user_id)
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    main_sku = callback_query.data.split('_')[0]
    # –ò—â–µ–º —Ç–æ–≤–∞—Ä –≤ —Å–ª–æ–≤–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ø–∏—Å–æ–∫ products = user_data['products']
    product = await get_product_from_data(main_sku, user_data)
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏
    main_info = await format_main_info(product, user_data['currency'])
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ create_kb
    kb = await create_options_kb(main_sku)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.answer(main_info, reply_markup=kb)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞—Ç–∫–∏ –∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞" –≤ –∫–æ—Ç–æ—Ä–æ–π callback_data = '_variants'
@router.callback_query(lambda callback_query: '_variants' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery):
    # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback_query.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis
    user_data = await get_data_from_redis(user_id)
    # –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª—é—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    currency = user_data['currency']
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    main_sku = callback_query.data.split('_')[0]
    # –ò—â–µ–º —Ç–æ–≤–∞—Ä –≤ —Å–ª–æ–≤–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ø–∏—Å–æ–∫ products = user_data['products']
    product = await get_product_from_data(main_sku, user_data)
    # –∏–º—è –ø—Ä–æ–¥—É–∫—Ç–∞
    name = product['name']
    # –≤—ã–≤–æ–¥ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–∞
    products_variants = product['variants']
    products_variants = await format_variants_message(products_variants, currency)
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Å–µ–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ create_sku_kb()
    kb = await create_options_kb(main_sku)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.answer(products_variants)
    await callback_query.message.answer(text=f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–æ–≤–∞—Ä–æ–º {name} <b>–∞—Ä—Ç.{main_sku}</b>', reply_markup=kb)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ" –≤ –∫–æ—Ç–æ—Ä–æ–π callback_data = '_photo'
@router.callback_query(lambda callback_query: '_photo' in callback_query.data and '_edit' not in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery):
    # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback_query.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis
    user_data = await get_data_from_redis(user_id)
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    main_sku = callback_query.data.split('_')[0]
    # –ò—â–µ–º —Ç–æ–≤–∞—Ä –≤ —Å–ª–æ–≤–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ø–∏—Å–æ–∫ products = user_data['products']
    product = await get_product_from_data(main_sku, user_data)
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ç–æ–≤–∞—Ä–∞
    name = product['name']
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Å–µ–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ create_sku_kb()
    kb = await create_options_kb(main_sku)
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    if len(product['photo_ids']) > 0:
        photo_ids = product['photo_ids']
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await callback_query.message.answer_media_group(await generate_photos(photo_ids))
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback_query.message.answer(text=f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–æ–≤–∞—Ä–æ–º {name} <b>–∞—Ä—Ç.{main_sku}</b>', reply_markup=kb)
    else:
        await callback_query.message.answer('–§–æ—Ç–æ –Ω–µ—Ç')
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–∞—Ç—å —Ç–æ–≤–∞—Ä" –≤ –∫–æ—Ç–æ—Ä–æ–π callback_data = '_sell_button', –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è
# –ø—Ä–æ–¥–∞–∂–∏
@router.callback_query(lambda callback_query: '_sell_button' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery):
    # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback_query.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis
    user_data = await get_data_from_redis(user_id)
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    main_sku = callback_query.data.split('_')[0]
    # –ò—â–µ–º —Ç–æ–≤–∞—Ä –≤ —Å–ª–æ–≤–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ø–∏—Å–æ–∫ products = user_data['products']
    product = await get_product_from_data(main_sku, user_data)
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ variants –∏–∑ json_value
    product_variant = product['variants']
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Ç–æ–≤–∞—Ä–∞
    kb = await create_variants_kb(product_variant, for_what='_sell_variant')
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∞ üëá', reply_markup=kb)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–æ–º —Ç–æ–≤–∞—Ä–∞ –∏ –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–≤–∞–µ–º–æ–≥–æ
# —Ç–æ–≤–∞—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ–º "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"
@router.callback_query(lambda callback_query: '_sell_variant' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery, state: FSMContext):
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ SellItemStates.quantity
    await state.set_state(SellItemStates.quantity)
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    variant_sku = callback_query.data.split('_')[0]
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FSM SellItemStates article
    await state.update_data(variant_sku=variant_sku)
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    kb = await create_cancel_kb()
    # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ–º "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"
    await callback_query.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>', reply_markup=kb)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–∞
@router.message(StateFilter(SellItemStates.quantity))
async def process_quantity(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 100
    if await check_int(message.text):
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        quantity = int(message.text)
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ article_variant –∏–∑ FSM
        data = await state.get_data()
        variant_sku = data.get("variant_sku")
        # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis
        user_data = await get_data_from_redis(user_id)
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
        main_sku = variant_sku.split('-')[0]
        # –ò—â–µ–º —Ç–æ–≤–∞—Ä –≤ —Å–ª–æ–≤–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ø–∏—Å–æ–∫ products = user_data['products']
        product = await get_product_from_data(main_sku, user_data)
        # –≤—ã–≤–æ–¥ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–∞
        product_variants = product['variants']
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        name = ''
        for i in product_variants:
            if i['sku'] == variant_sku:
                name = i['name']
                break
        # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é sell_product
        if await sell_product(user_id, variant_sku, quantity) is True:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ—Ç–º–µ–Ω–æ–π
            kb = await create_options_kb(main_sku)
            # –ü–∏—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Ç–æ–≤–∞—Ä –ø—Ä–æ–¥–∞–Ω –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ quantity —à—Ç—É–∫
            await message.answer(text=f'–¢–æ–≤–∞—Ä {name} –ø—Ä–æ–¥–∞–Ω –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {quantity} —à—Ç.', reply_markup=kb)
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ default
            await state.clear()
        else:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"
            kb = await create_variants_kb(product_variants, for_what='_sell_variant')
            # –ü–∏—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ
            await message.answer(text=f'–¢–æ–≤–∞—Ä–∞ {name} <b>–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ</b>. –í—ã–±–µ—Ä–µ—Ç–µ –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '
                                      f'"–û—Ç–º–µ–Ω–∞"', reply_markup=kb)
    else:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
        kb = await create_cancel_kb()
        # –ü–∏—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100
        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100 –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>', reply_markup=kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å —Ç–æ–≤–∞—Ä" –≤ –∫–æ—Ç–æ—Ä–æ–π callback_data = '_return_button', –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π
# —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
@router.callback_query(lambda callback_query: '_return_button' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    main_sku = callback_query.data.split('_')[0]
    # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback_query.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis
    user_data = await get_data_from_redis(user_id)
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ product –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É —Ç–æ–≤–∞—Ä–∞
    product = await get_product_from_data(main_sku, user_data)
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ variants –∏–∑ json_value
    product_variants = product['variants']
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Ç–æ–≤–∞—Ä–∞
    kb = await create_variants_kb(product_variants, for_what='_return_variant')
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∞ üëá', reply_markup=kb)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–æ–º —Ç–æ–≤–∞—Ä–∞ –∏ –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ
# —Ç–æ–≤–∞—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ–º "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"
@router.callback_query(lambda callback_query: '_return_variant' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    variant_sku = callback_query.data.split('_')[0]
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FSM SellItemStates article
    await state.update_data(variant_sku=variant_sku)
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ SellItemStates.quantity
    await state.set_state(ReturnItemStates.quantity)
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    kb = await create_cancel_kb()
    # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ–º "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"
    await callback_query.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>', reply_markup=kb)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞
@router.message(StateFilter(ReturnItemStates.quantity))
async def process_quantity(message: Message, state: FSMContext):
    if await check_int(message.text):
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        quantity = int(message.text)
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ article_variant –∏–∑ FSM
        data = await state.get_data()
        variant_sku = data.get("variant_sku")
        # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis
        user_data = await get_data_from_redis(user_id)
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
        main_sku = variant_sku.split('-')[0]
        # –ò—â–µ–º —Ç–æ–≤–∞—Ä –≤ —Å–ª–æ–≤–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ø–∏—Å–æ–∫ products = user_data['products']
        product = await get_product_from_data(main_sku, user_data)
        # –≤—ã–≤–æ–¥ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–∞
        product_variants = product['variants']
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        name = ''
        for i in product_variants:
            if i['sku'] == variant_sku:
                name = i['name']
                break
        # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é return_product
        if await return_product(user_id, variant_sku, quantity) is True:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ—Ç–º–µ–Ω–æ–π
            kb = await create_cancel_kb()
            # –ü–∏—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Ç–æ–≤–∞—Ä –ø—Ä–æ–¥–∞–Ω –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ quantity —à—Ç—É–∫
            await message.answer(text=f'–¢–æ–≤–∞—Ä {name} –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {quantity} —à—Ç.', reply_markup=kb)
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ default
            await state.clear()
        else:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞"
            kb = await create_variants_kb(product_variants, for_what='_return_variant')
            # –ü–∏—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ
            await message.answer(text=f'–¢–æ–≤–∞—Ä–∞ {name} <b>–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ</b>. –í—ã–±–µ—Ä–µ—Ç–µ –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '
                                      f'"–û—Ç–º–µ–Ω–∞"', reply_markup=kb)
    else:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
        kb = await create_cancel_kb()
        # –ü–∏—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100
        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100 –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>', reply_markup=kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä
@router.callback_query(lambda callback_query: '_edit_button' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    main_sku = callback_query.data.split('_')[0]
    # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ create_edit_kb
    kb = await create_edit_kb(main_sku)
    # –ü–æ–ª—É—á–∞–µ–º product –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É —Ç–æ–≤–∞—Ä–∞
    product = await get_product_from_data(main_sku, await get_data_from_redis(callback_query.from_user.id))
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ç–æ–≤–∞—Ä–∞
    name = product['name']
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.answer(text=f'–í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ —Ç–æ–≤–∞—Ä {name} –∞—Ä—Ç. {main_sku}\n'
                                             f'–≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å üëá', reply_markup=kb)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@router.callback_query(lambda callback_query: '_edit_name' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    main_sku = callback_query.data.split('_')[0]
    # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback_query.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis
    user_data = await get_data_from_redis(user_id)
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ product –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É —Ç–æ–≤–∞—Ä–∞
    product = await get_product_from_data(main_sku, user_data)
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    kb = await create_cancel_kb()
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FSMEditProduct edit_name
    await state.set_state(FSMEditProduct.edit_name)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –≤ FSM
    await state.update_data(main_sku=main_sku)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å
    await callback_query.message.answer(text=f'–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <b>{product["name"]}\n</b> –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ '
                                             '–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>', reply_markup=kb)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@router.message(StateFilter(FSMEditProduct.edit_name))
async def process_name(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    new_name = message.text
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ main_article –∏–∑ FSM
    data = await state.get_data()
    main_sku = data.get("main_sku")
    # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis
    user_data = await get_data_from_redis(user_id)
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ product –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É —Ç–æ–≤–∞—Ä–∞
    product = await get_product_from_data(main_sku, user_data)
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é edit_name
    await edit_name(product, new_name)
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ Redis
    await save_data_to_redis(user_id, user_data)
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
    kb = await create_edit_kb(main_sku)
    # –ü–∏—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Ç–æ–≤–∞—Ä –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –∏ —Ç–µ–ø–µ—Ä—å –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ name
    await message.answer(text=f'–¢–æ–≤–∞—Ä –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –∏ —Ç–µ–ø–µ—Ä—å –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{new_name}</b>', reply_markup=kb)
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@router.callback_query(lambda callback_query: '_edit_description' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    main_sku = callback_query.data.split('_')[0]
    # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback_query.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis
    user_data = await get_data_from_redis(user_id)
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ product –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É —Ç–æ–≤–∞—Ä–∞
    product = await get_product_from_data(main_sku, user_data)
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    kb = await create_cancel_kb()
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FSMEditProduct edit_description
    await state.set_state(FSMEditProduct.edit_description)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –≤ FSM
    await state.update_data(main_sku=main_sku)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å
    await callback_query.message.answer(text=f'–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <b>{product["description"]}\n</b> –í–≤–µ–¥–∏—Ç–µ '
                                             f'–Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>', reply_markup=kb)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@router.message(StateFilter(FSMEditProduct.edit_description))
async def process_description(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    description = message.text
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ main_article –∏–∑ FSM
    data = await state.get_data()
    main_sku = data.get("main_sku")
    # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis
    user_data = await get_data_from_redis(user_id)
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ product –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É —Ç–æ–≤–∞—Ä–∞
    product = await get_product_from_data(main_sku, user_data)
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é edit_description
    await edit_description(product, description)
    # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ Redis
    await save_data_to_redis(user_id, user_data)
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
    kb = await create_edit_kb(main_sku)
    # –ü–∏—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Ç–æ–≤–∞—Ä –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –∏ —Ç–µ–ø–µ—Ä—å –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ description
    await message.answer(text=f'–¢–æ–≤–∞—Ä –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –∏ —Ç–µ–ø–µ—Ä—å –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ: <b>{description}</b>', reply_markup=kb)
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞
@router.callback_query(lambda callback_query: '_edit_sku' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    main_sku = callback_query.data.split('_')[0]
    # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback_query.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis
    user_data = await get_data_from_redis(user_id)
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ product –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É —Ç–æ–≤–∞—Ä–∞
    product = await get_product_from_data(main_sku, user_data)
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    kb = await create_cancel_kb()
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FSMEditProduct edit_article
    await state.set_state(FSMEditProduct.edit_sku)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –≤ FSM
    await state.update_data(main_sku=main_sku)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å
    await callback_query.message.answer(text=f'–¢–µ–∫—É—â–∏–π –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞: <b>{product["sku"]}\n</b> –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π '
                                             f'–∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>', reply_markup=kb)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@router.message(StateFilter(FSMEditProduct.edit_sku))
async def process_sku(message: Message, state: FSMContext):
    # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    new_sku = message.text
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤ Redis
    if await check_product_in_redis(user_id, new_sku):
        await message.answer(text=f'–¢–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º <b>{new_sku}</b> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ '
                                  f'–Ω–∞–∂–º–∏—Ç–µ'
                                  f'<b>–æ—Ç–º–µ–Ω–∞</b>')
        return
    else:
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ main_article –∏–∑ FSM
        data = await state.get_data()
        main_sku = data.get("main_sku")
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis
        user_data = await get_data_from_redis(user_id)
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ product –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É —Ç–æ–≤–∞—Ä–∞
        product = await get_product_from_data(main_sku, user_data)
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é edit_sku
        await edit_sku(product, new_sku)
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∞—Ä—Ç–∏–∫—É–ª
        new_product = await remove_product_from_data(main_sku, new_sku, user_data)
        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ Redis
        await save_data_to_redis(user_id, new_product)
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
        kb = await create_edit_kb(new_sku)
        # –ü–∏—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Ç–æ–≤–∞—Ä –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –∏ —Ç–µ–ø–µ—Ä—å –µ–≥–æ –∞—Ä—Ç–∏–∫—É–ª sku
        await message.answer(text=f'–¢–æ–≤–∞—Ä –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –∏ —Ç–µ–ø–µ—Ä—å –µ–≥–æ –∞—Ä—Ç–∏–∫—É–ª: <b>{new_sku}</b>', reply_markup=kb)
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞
@router.callback_query(lambda callback_query: '_edit_color' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    main_sku = callback_query.data.split('_')[0]
    # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback_query.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis
    user_data = await get_data_from_redis(user_id)
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ product –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É —Ç–æ–≤–∞—Ä–∞
    product = await get_product_from_data(main_sku, user_data)
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ü–≤–µ—Ç–æ–≤ —Ç–æ–≤–∞—Ä–∞
    colors = product['colors']
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ü–≤–µ—Ç–æ–≤ —Ç–æ–≤–∞—Ä–∞ –∏ –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    kb = await create_edit_color_kb(colors)
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FSMEditProduct edit_color
    await state.set_state(FSMEditProduct.edit_color)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –≤ FSM
    await state.update_data(main_sku=main_sku)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–≤–µ—Ç–∞–º–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏ –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π —Ü–≤–µ—Ç –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å
    await callback_query.message.answer(text=f'–¢–µ–∫—É—â–∏–µ —Ü–≤–µ—Ç–∞ —Ç–æ–≤–∞—Ä–∞: <b>{colors}\n</b> –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –∏–ª–∏ '
                                             f'–Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>', reply_markup=kb)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@router.callback_query(lambda callback_query: '_show_color' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery, state: FSMContext):
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ FSM –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç
    await state.update_data(selected_color=callback_query.data.split("_")[0].lower())
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    kb = await create_cancel_kb()
    # –ü–∏—à–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞–∫–æ–π —Ü–≤–µ—Ç –æ–Ω –≤—ã–±—Ä–∞–ª –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π —Ü–≤–µ—Ç –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å
    await callback_query.message.answer(
        text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ü–≤–µ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: <b>{callback_query.data.split("_")[0]}</b>\n'
             f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ü–≤–µ—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>', reply_markup=kb)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
@router.message(StateFilter(FSMEditProduct.edit_color))
async def process_color(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–≤–µ—Ç –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
    if await check_color(message.text.lower()):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ü–≤–µ—Ç –≤ FSM
        await state.update_data(desired_color=message.text.lower())
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ FSM –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã –∏ –∂–µ–ª–∞–µ–º–æ–≥–æ —Ü–≤–µ—Ç–∞
        data = await state.get_data()
        selected_color = data.get("selected_color")
        desired_color = data.get("desired_color")
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ main_article –∏–∑ FSM
        main_sku = data.get("main_sku")
        # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis
        user_data = await get_data_from_redis(user_id)
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ product –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É —Ç–æ–≤–∞—Ä–∞
        product = await get_product_from_data(main_sku, user_data)
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é edit_color
        new_color = await edit_color(product, selected_color, desired_color)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ Redis
        await save_data_to_redis(user_id, user_data)
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
        kb = await create_edit_kb(main_sku)
        # –í—ã–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –∏ —Ç–µ–ø–µ—Ä—å –µ–≥–æ —Ü–≤–µ—Ç desired_color, –∞ —Ç–∞–∫–∂–µ
        # –≤—ã–≤–æ–¥–∏–º, —á—Ç–æ –≤—Å–µ —Ü–≤–µ—Ç–∞ —Ç–æ–≤–∞—Ä–∞ —Ç–µ–ø–µ—Ä—å new_color['colors']
        await message.answer(text=f'–¶–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –∏ —Ç–µ–ø–µ—Ä—å –µ–≥–æ —Ü–≤–µ—Ç: <b>{desired_color}</b>\n'
                                  f'–í—Å–µ —Ü–≤–µ—Ç–∞ —Ç–æ–≤–∞—Ä–∞: <b>{new_color["colors"]}</b>', reply_markup=kb)
    else:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
        kb = await create_cancel_kb()
        # –ï—Å–ª–∏ —Ü–≤–µ—Ç –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π, —Ç–æ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π —Ü–≤–µ—Ç –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å
        await message.answer(text=f'–¶–≤–µ—Ç –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>', reply_markup=kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞. –†–∞–±–æ—Ç–∞–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–Ω–æ–ø–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞.
@router.callback_query(lambda callback_query: '_edit_size' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery, state: FSMContext):
    main_sku = callback_query.data.split('_')[0]
    # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback_query.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis
    user_data = await get_data_from_redis(user_id)
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ product –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É —Ç–æ–≤–∞—Ä–∞
    product = await get_product_from_data(main_sku, user_data)
    sizes = product['sizes']
    kb = await create_edit_size_kb(sizes)
    await state.set_state(FSMEditProduct.edit_size)
    await state.update_data(main_sku=main_sku)
    await callback_query.message.answer(text=f'–¢–µ–∫—É—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–∞: <b>{sizes}\n</b> –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∏–ª–∏ '
                                             f'–Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>', reply_markup=kb)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@router.callback_query(lambda callback_query: '_show_size' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery, state: FSMContext):
    await state.update_data(selected_size=callback_query.data.split("_")[0].lower())
    kb = await create_cancel_kb()
    await callback_query.message.answer(
        text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: <b>{callback_query.data.split("_")[0]}</b>\n'
             f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>', reply_markup=kb)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
@router.message(StateFilter(FSMEditProduct.edit_size))
async def process_size(message: Message, state: FSMContext):
    if await check_size(message.text.lower()):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ä–∞–∑–º–µ—Ä –≤ FSM
        await state.update_data(desired_size=message.text.lower())
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ FSM –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã –∏ –∂–µ–ª–∞–µ–º–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        data = await state.get_data()
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ selected_size –∏ desired_size –∏–∑ FSM
        selected_size = data.get("selected_size")
        desired_size = data.get("desired_size")
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ main_sku –∏–∑ FSM
        main_sku = data.get("main_sku")
        # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis
        user_data = await get_data_from_redis(user_id)
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ product –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É —Ç–æ–≤–∞—Ä–∞
        product = await get_product_from_data(main_sku, user_data)
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é edit_size
        new_size = await edit_size(product, selected_size, desired_size)
        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ Redis
        await save_data_to_redis(user_id, user_data)
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
        kb = await create_edit_kb(main_sku)
        await state.clear()
        await message.answer(text=f'–†–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –∏ —Ç–µ–ø–µ—Ä—å –µ–≥–æ —Ä–∞–∑–º–µ—Ä: <b>{desired_size}</b>\n'
                                  f'–í—Å–µ —Ä–∞–∑–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–∞: <b>{new_size["sizes"]}</b>', reply_markup=kb)
    else:
        kb = await create_cancel_kb()
        await message.answer(text=f'–†–∞–∑–º–µ—Ä –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>',
                             reply_markup=kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞. –†–∞–±–æ—Ç–∞–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–Ω–æ–ø–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞.
@router.callback_query(lambda callback_query: '_edit_price' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ main_sku –∏–∑ callback_query
    main_sku = callback_query.data.split('_')[0]
    # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback_query.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis
    user_data = await get_data_from_redis(user_id)
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ product –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É —Ç–æ–≤–∞—Ä–∞
    product = await get_product_from_data(main_sku, user_data)
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
    price = product['price']
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω—ã
    kb = await create_cancel_kb()
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ edit_price
    await state.set_state(FSMEditProduct.edit_price)
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(main_sku=main_sku)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π —Ç–æ–≤–∞—Ä–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback_query.message.answer(text=f'–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: <b>{price}{user_data["currency"]}\n</b> –í–≤–µ–¥–∏—Ç–µ '
                                             f'–Ω–æ–≤—É—é —Ü–µ–Ω—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>', reply_markup=kb)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.
@router.message(StateFilter(FSMEditProduct.edit_price))
async def process_price(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–Ω–∞ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    if await check_price(message.text):
        # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(desired_price=message.text)
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ main_sku –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        main_sku = data.get("main_sku")
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ desired_price –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        desired_price = data.get("desired_price")
        # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis
        user_data = await get_data_from_redis(user_id)
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ product –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É —Ç–æ–≤–∞—Ä–∞
        product = await get_product_from_data(main_sku, user_data)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ edit_price
        await edit_price(product, desired_price)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ Redis
        await save_data_to_redis(user_id, user_data)
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
        kb = await create_edit_kb(main_sku)
        # –í—ã–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏ —Ç–µ–ø–µ—Ä—å –µ–≥–æ —Ü–µ–Ω–∞ desired_price
        await message.answer(text=f'–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏ —Ç–µ–ø–µ—Ä—å –µ–≥–æ —Ü–µ–Ω–∞: <b>{desired_price}</b>{user_data["currency"]}',
                             reply_markup=kb)
    else:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã
        kb = await create_cancel_kb()
        # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —Ç–æ –≤—ã–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ —Ü–µ–Ω–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        await message.answer(text=f'–¶–µ–Ω–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>',
                             reply_markup=kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ò–∑–º–µ–Ω–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏'. –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–∞ –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫.
@router.callback_query(lambda callback_query: '_edit_stock' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ main_article –∏–∑ callback_query
    main_sku = callback_query.data.split('_')[0]
    # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback_query.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis
    user_data = await get_data_from_redis(user_id)
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ product –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É —Ç–æ–≤–∞—Ä–∞
    product = await get_product_from_data(main_sku, user_data)
    # –û—Ç—Å–µ–∫–∞–µ–º –≤ —Å–ª–æ–≤–∞—Ä–µ –≤—Å–µ –∫—Ä–æ–º–µ variants
    product_variants = product['variants']
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–∞
    kb = await create_variants_kb(product_variants, for_what='_stock')
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ edit_stock
    await state.set_state(FSMEditProduct.edit_stock)
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(main_sku=main_sku)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback_query.message.answer(text=f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é —Ç–æ–≤–∞—Ä–∞, –æ—Å—Ç–∞—Ç–∫–∏ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ '
                                             f'–Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>',
                                        reply_markup=kb)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º
# –æ—Å—Ç–∞—Ç–∫–æ–º —Ç–æ–≤–∞—Ä–∞ –∏ –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –ª–∏–±–æ –Ω–∞–∂–∞—Ç—å –æ—Ç–º–µ–Ω–∞.
@router.callback_query(lambda callback_query: '_stock' in callback_query.data and '-' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ main_article –∏–∑ callback_query
    main_sku = callback_query.data.split('-')[0]
    variant_sku = callback_query.data.split('_')[0]
    # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback_query.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis
    user_data = await get_data_from_redis(user_id)
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ product –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É —Ç–æ–≤–∞—Ä–∞
    product = await get_product_from_data(main_sku, user_data)
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ c –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ get_stock
    stock = await get_stock(product, variant_sku)
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω–∞
    kb = await create_cancel_kb()
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ edit_stock
    await state.set_state(FSMEditProduct.edit_stock)
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(main_sku=main_sku, variant_sku=variant_sku, stock=stock)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º —Ç–æ–≤–∞—Ä–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback_query.message.answer(text=f'–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞: <b>{stock}\n</b> –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –∏–ª–∏ '
                                             f'–Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>', reply_markup=kb)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
@router.message(StateFilter(FSMEditProduct.edit_stock))
async def process_stock(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å—Ç–∞—Ç–æ–∫ –≤–≤–µ–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    if await check_stock(message.text):
        # –ï—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ –≤–≤–µ–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(desired_stock=message.text)
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ main_article –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        main_sku = data.get("main_sku")
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ variant_article –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        variant_sku = data.get("variant_sku")
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ desired_stock –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        desired_stock = data.get("desired_stock")
        # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis
        user_data = await get_data_from_redis(user_id)
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ product –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É —Ç–æ–≤–∞—Ä–∞
        product = await get_product_from_data(main_sku, user_data)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ c –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ edit_stock
        await edit_stock(product, variant_sku, desired_stock)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Redis
        await save_data_to_redis(user_id, user_data)
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        kb = await create_edit_kb(main_sku)
        # –í—ã–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –∏ —Ç–µ–ø–µ—Ä—å –µ–≥–æ –æ—Å—Ç–∞—Ç–æ–∫ desired_stock
        await message.answer(text=f'–û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –∏ —Ç–µ–ø–µ—Ä—å –µ–≥–æ –æ—Å—Ç–∞—Ç–æ–∫: <b>{desired_stock}</b>',
                             reply_markup=kb)
    else:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã
        kb = await create_cancel_kb()
        # –ï—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —Ç–æ –≤—ã–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –æ—Å—Ç–∞—Ç–æ–∫ –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        await message.answer(text=f'–û—Å—Ç–∞—Ç–æ–∫ –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b>',
                             reply_markup=kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–æ–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ" –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞. –í—ã–≤–æ–¥–∏—Ç –≤—Å–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É–µ—Ç –ª–∏ –∏—Ö
# –∑–∞–º–µ–Ω–∏—Ç—å
@router.callback_query(lambda callback_query: '_edit_photo' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    main_sku = callback_query.data.split('_')[0]
    # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback_query.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis
    user_data = await get_data_from_redis(user_id)
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ product –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É —Ç–æ–≤–∞—Ä–∞
    product = await get_product_from_data(main_sku, user_data)
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω–∞
    kb = await cancel_and_done_kb()
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ edit_photo
    await state.set_state(FSMEditProduct.edit_photo)
    # –ü–µ—Ä–µ–¥–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞
    await state.update_data(main_sku=main_sku)
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    if len(product['photo_ids']) > 0:
        photo_ids = product['photo_ids']
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await callback_query.message.answer_media_group(await generate_photos(photo_ids))
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback_query.message.answer(text='–§–æ—Ç–æ –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ üëÜüèº')
        await callback_query.message.answer(text='–•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ?\n –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ñ–æ—Ç–æ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.',
                                            reply_markup=kb)
    else:
        await callback_query.message.answer(text='–§–æ—Ç–æ –Ω–µ—Ç, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∏ –Ω–∞–∂–º–∏—Ç–µ "–≥–æ—Ç–æ–≤–æ"', reply_markup=kb)
    await callback_query.answer()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ñ–æ—Ç–æ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ñ–æ—Ç–æ
lst = []  # –°–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ñ–æ—Ç–æ


@router.message(StateFilter(FSMEditProduct.edit_photo), F.photo)
async def process_photo_sent(message: Message):
    largest_photo = message.photo[-1]
    lst.append({"unique_id": largest_photo.file_unique_id, "id": largest_photo.file_id})


# –•–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
@router.callback_query(StateFilter(FSMEditProduct.edit_photo), lambda callback_query: 'done' in callback_query.data)
async def process_done_button(callback_query: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    data = await state.get_data()
    data["photo_ids"] = lst
    main_sku = data.get("main_sku")
    photo_ids = data.get("photo_ids")
    # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback_query.from_user.id
    # –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ id
    user_data = await get_data_from_redis(user_id)
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ product –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É —Ç–æ–≤–∞—Ä–∞
    product = await get_product_from_data(main_sku, user_data)
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–æ–≤–∞—Ä–∞
    product['photo_ids'] = photo_ids
    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await save_data_to_redis(user_id, user_data)
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    kb = await create_edit_kb(main_sku)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
    await callback_query.message.reply(text='–§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!', reply_markup=kb)
    # –æ—á–∏—â–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    await state.clear()
    lst.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞. –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
# –ø—É—Ç–µ–º –≤–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –∏ —Å–ª–æ–≤–∞ "—É–¥–∞–ª–∏—Ç—å"
@router.callback_query(lambda callback_query: '_edit_delete' in callback_query.data)
async def process_callback_query(callback_query: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    main_sku = callback_query.data.split('_')[0]
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω–∞
    kb = await create_cancel_kb()
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ edit_delete
    await state.set_state(FSMEditProduct.edit_delete)
    # –ü–µ—Ä–µ–¥–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞
    await state.update_data(main_sku=main_sku)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –∏ —Å–ª–æ–≤–æ "—É–¥–∞–ª–∏—Ç—å"
    await callback_query.message.answer(text=f'–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª "{main_sku}" —Ç–æ–≤–∞—Ä–∞ –∏ —Å–ª–æ–≤–æ "—É–¥–∞–ª–∏—Ç—å" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è '
                                             f'—É–¥–∞–ª–µ–Ω–∏—è, <b>–¢–û–í–ê–† –ë–£–î–ï–¢ –£–î–ê–õ–ï–ù –ù–ê–í–°–ï–ì–î–ê üíÄ</b>', reply_markup=kb)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ edit_delete. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –∏ —Å–ª–æ–≤–æ "—É–¥–∞–ª–∏—Ç—å", —Ç–æ
# —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ Redis –∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞. –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —Å–ª–æ–≤–æ
# "—É–¥–∞–ª–∏—Ç—å", —Ç–æ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –∏ —Å–ª–æ–≤–æ "—É–¥–∞–ª–∏—Ç—å" –µ—â–µ —Ä–∞–∑.
@router.message(StateFilter(FSMEditProduct.edit_delete))
async def process_delete_product(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    main_sku = data.get("main_sku")
    # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis
    user_data = await get_data_from_redis(user_id)
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ product –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É —Ç–æ–≤–∞—Ä–∞
    product = await get_product_from_data(main_sku, user_data)
    # –ï—Å–ª–∏ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –∏ —Å–ª–æ–≤–æ "—É–¥–∞–ª–∏—Ç—å" –≤–≤–µ–¥–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —Ç–æ —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ Redis, –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏
    # –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
    if product and message.text == f'{main_sku} —É–¥–∞–ª–∏—Ç—å':
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω–∞
        kb = await create_cancel_kb()
        # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ Redis
        user_data = await delete_product_from_data(main_sku, user_data)
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ Redis
        await save_data_to_redis(user_id, user_data)
        await state.clear()
        await message.answer(text=f'–¢–æ–≤–∞—Ä {main_sku} —É–¥–∞–ª–µ–Ω', reply_markup=kb)
    else:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω–∞
        kb = await create_cancel_kb()
        # –ï—Å–ª–∏ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –∏ —Å–ª–æ–≤–æ "—É–¥–∞–ª–∏—Ç—å" –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —Ç–æ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º
        # –≤–≤–µ—Å—Ç–∏ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –∏ —Å–ª–æ–≤–æ "—É–¥–∞–ª–∏—Ç—å" –µ—â–µ —Ä–∞–∑.
        await message.answer(text=f'–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ {main_sku} –∏–ª–∏ —Å–ª–æ–≤–æ "—É–¥–∞–ª–∏—Ç—å" –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ '
                                  f'—Ä–∞–∑', reply_markup=kb)

